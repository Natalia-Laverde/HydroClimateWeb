# Generated by Django 2.1.2 on 2018-12-05 19:52

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ActionAnnotations',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'ODM2.ActionAnnotations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ActionBy',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('isActionLead', models.BooleanField(verbose_name='is lead person on action')),
                ('roleDescription', models.CharField(blank=True, max_length=5000, verbose_name="person's role on this action")),
            ],
            options={
                'verbose_name': 'action by',
                'verbose_name_plural': 'action by',
                'db_table': 'ODM2.ActionBy',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ActionDirectives',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'ODM2.ActionDirectives',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ActionExtensionPropertyValues',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('propertyValue', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'ODM2.ActionExtensionPropertyValues',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Actions',
            fields=[
                ('actionId', models.AutoField(primary_key=True, serialize=False)),
                ('beginDateTime', models.DateTimeField(verbose_name='begin date time')),
                ('beginDateTimeUtcOffset', models.IntegerField(default=4, verbose_name='begin date time clock off set (from GMT)')),
                ('endDateTime', models.DateTimeField(blank=True, null=True, verbose_name='end date time')),
                ('endDateTimeUtcOffset', models.IntegerField(default=4, verbose_name='end date time clock off set (from GMT)')),
                ('actionDescription', models.CharField(blank=True, max_length=5000, verbose_name='action description')),
                ('actionFileLink', models.CharField(blank=True, max_length=255, verbose_name='action file link')),
            ],
            options={
                'verbose_name': 'action',
                'db_table': 'ODM2.Actions',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Affiliations',
            fields=[
                ('affiliationId', models.AutoField(primary_key=True, serialize=False)),
                ('isPrimaryOrganizationContact', models.NullBooleanField(verbose_name='primary organization contact? ')),
                ('affiliationStartDate', models.DateField(verbose_name='When affiliation began ')),
                ('affiliationEndDate', models.DateField(blank=True, null=True, verbose_name='When affiliation ended')),
                ('primaryPhone', models.CharField(blank=True, max_length=50, verbose_name='primary phone')),
                ('primaryEmail', models.CharField(max_length=255, verbose_name='primary email')),
                ('primaryAddress', models.CharField(blank=True, max_length=255, verbose_name='primary address')),
                ('personLink', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'verbose_name': 'affiliation (relate people and organizations)',
                'verbose_name_plural': 'affiliation (relate people and organizations)',
                'db_table': 'ODM2.Affiliations',
                'ordering': ['-primaryEmail'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Annotations',
            fields=[
                ('annotationId', models.AutoField(primary_key=True, serialize=False)),
                ('annotationCode', models.CharField(blank=True, max_length=50)),
                ('annotationText', models.CharField(max_length=500)),
                ('annotationDateTime', models.DateTimeField(blank=True, null=True)),
                ('annotationUtcOffset', models.IntegerField(blank=True, null=True)),
                ('annotationLink', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'ODM2.Annotations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AuthorLists',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('authorOrder', models.IntegerField(blank=True, null=True, verbose_name='author order')),
            ],
            options={
                'verbose_name': 'author list',
                'verbose_name_plural': 'author list',
                'db_table': 'ODM2.AuthorLists',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CalibrationReferenceEquipment',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'ODM2.CalibrationReferenceEquipment',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CalibrationStandards',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'ODM2.CalibrationStandards',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CategoricalResultValueAnnotations',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('annotationId', models.ForeignKey(db_column='annotationId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Annotations')),
            ],
            options={
                'db_table': 'ODM2.CategoricalResultValueAnnotations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CategoricalResultValues',
            fields=[
                ('valueId', models.AutoField(primary_key=True, serialize=False)),
                ('dataValue', models.CharField(max_length=255)),
                ('valueDatetime', models.DateTimeField()),
                ('valueDatetimeUtcOffset', models.IntegerField()),
            ],
            options={
                'db_table': 'ODM2.CategoricalResultValues',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CitationExtensionPropertyValues',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('propertyValue', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'citation extension property',
                'verbose_name_plural': 'citation extension properties',
                'db_table': 'ODM2.CitationExtensionPropertyValues',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CitationExternalIdentifiers',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('citationExternalIdentifier', models.CharField(db_column='citationExternalIdentifier', max_length=255)),
                ('citationExternalIdentifierURI', models.CharField(blank=True, db_column='citationExternalIdentifierURI', max_length=255)),
            ],
            options={
                'verbose_name': 'citationExternalIdentifier',
                'db_table': 'ODM2.CitationExternalIdentifiers',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Citations',
            fields=[
                ('citationId', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('publisher', models.CharField(max_length=255)),
                ('publicationYear', models.IntegerField(verbose_name='year')),
                ('citationLink', models.CharField(blank=True, max_length=255, verbose_name='Citation Link')),
            ],
            options={
                'verbose_name': 'citation',
                'db_table': 'ODM2.Citations',
                'ordering': ['title'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvActionType',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=1000)),
                ('category', models.CharField(blank=True, max_length=255)),
                ('sourceVocabularyURI', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'ODM2.CvActionType',
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvAggregationStatistic',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=1000)),
                ('category', models.CharField(blank=True, max_length=255)),
                ('sourceVocabularyURI', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'ODM2.CvAggregationStatistic',
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvAnnotationType',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=1000)),
                ('category', models.CharField(blank=True, max_length=255)),
                ('sourceVocabularyURI', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'ODM2.CvAnnotationType',
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvCensorCode',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=1000)),
                ('category', models.CharField(blank=True, max_length=255)),
                ('sourceVocabularyURI', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'ODM2.CvCensorCode',
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvDataQualityType',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=1000)),
                ('category', models.CharField(blank=True, max_length=255)),
                ('sourceVocabularyURI', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'ODM2.CvDataQualityType',
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvDatasetTypeCV',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=1000)),
                ('category', models.CharField(blank=True, max_length=255)),
                ('sourceVocabularyURI', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'ODM2.CvDatasetTypeCV',
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvDirectiveType',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=1000)),
                ('category', models.CharField(blank=True, max_length=255)),
                ('sourceVocabularyURI', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'ODM2.CvDirectiveType',
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvElevationDatum',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=1000)),
                ('category', models.CharField(blank=True, max_length=255)),
                ('sourceVocabularyURI', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'verbose_name': 'elevation datum',
                'db_table': 'ODM2.CvElevationDatum',
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvEquipmentType',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=1000)),
                ('category', models.CharField(blank=True, max_length=255)),
                ('sourceVocabularyURI', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'ODM2.CvEquipmentType',
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvMedium',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=1000)),
                ('category', models.CharField(blank=True, max_length=255)),
                ('sourceVocabularyURI', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'ODM2.CvMedium',
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvMethodType',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=1000)),
                ('category', models.CharField(blank=True, max_length=255)),
                ('sourceVocabularyURI', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'ODM2.CvMethodType',
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvOrganizationType',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=1000)),
                ('category', models.CharField(blank=True, max_length=255)),
                ('sourceVocabularyURI', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'ODM2.CvOrganizationType',
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvPropertyDataType',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=1000)),
                ('category', models.CharField(blank=True, max_length=255)),
                ('sourceVocabularyURI', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'ODM2.CvPropertyDataType',
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvQualityCode',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=1000)),
                ('category', models.CharField(blank=True, max_length=255)),
                ('sourceVocabularyURI', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'ODM2.CvQualityCode',
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvReferenceMaterialMedium',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=1000)),
                ('category', models.CharField(blank=True, max_length=255)),
                ('sourceVocabularyURI', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'ODM2.CvReferenceMaterialMedium',
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvRelationshipType',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=1000)),
                ('category', models.CharField(blank=True, max_length=255)),
                ('sourceVocabularyURI', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'ODM2.CvRelationshipType',
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvResultType',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=1000)),
                ('category', models.CharField(blank=True, max_length=255)),
                ('sourceVocabularyURI', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'ODM2.CvResultType',
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvSamplingFeatureGeoType',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=1000)),
                ('category', models.CharField(blank=True, max_length=255)),
                ('sourceVocabularyURI', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'verbose_name': 'sampling feature geo type',
                'db_table': 'ODM2.CvSamplingFeatureGeoType',
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvSamplingFeatureType',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=1000)),
                ('category', models.CharField(blank=True, max_length=255)),
                ('sourceVocabularyURI', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'verbose_name': 'sampling feature type',
                'db_table': 'ODM2.CvSamplingFeatureType',
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvSiteType',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=1000)),
                ('category', models.CharField(blank=True, max_length=255)),
                ('sourceVocabularyURI', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'ODM2.CvSiteType',
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvSpatialOffsetType',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=1000)),
                ('category', models.CharField(blank=True, max_length=255)),
                ('sourceVocabularyURI', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'ODM2.CvSpatialOffsetType',
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvSpeciation',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=1000)),
                ('category', models.CharField(blank=True, max_length=255)),
                ('sourceVocabularyURI', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'ODM2.CvSpeciation',
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvSpecimenMedium',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=1000)),
                ('category', models.CharField(blank=True, max_length=255)),
                ('sourceVocabularyURI', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'ODM2.CvSpecimenMedium',
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvSpecimenType',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=1000)),
                ('category', models.CharField(blank=True, max_length=255)),
                ('sourceVocabularyURI', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'ODM2.CvSpecimenType',
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvStatus',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=1000)),
                ('category', models.CharField(blank=True, max_length=255)),
                ('sourceVocabularyURI', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'ODM2.CvStatus',
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvTaxonomicClassifierType',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=1000)),
                ('category', models.CharField(blank=True, max_length=255)),
                ('sourceVocabularyURI', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'verbose_name': 'taxonomic classifier',
                'db_table': 'ODM2.CvTaxonomicClassifierType',
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvUnitsType',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=1000)),
                ('category', models.CharField(blank=True, max_length=255)),
                ('sourceVocabularyURI', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'ODM2.CvUnitsType',
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvVariableName',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=1000)),
                ('category', models.CharField(blank=True, max_length=255)),
                ('sourceVocabularyURI', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'ODM2.CvVariableName',
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvVariableType',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=1000)),
                ('category', models.CharField(blank=True, max_length=255)),
                ('sourceVocabularyURI', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'ODM2.CvVariableType',
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DataLoggerFileColumns',
            fields=[
                ('dataLoggerFileColumnId', models.AutoField(primary_key=True, serialize=False)),
                ('columnLabel', models.CharField(max_length=50, verbose_name='column label')),
                ('columnDescription', models.CharField(blank=True, help_text='To disble ingestion of a column type skip, or to specify a column as the date time enter datetime if the datetime is an excel format numeric datetime enter exceldatetime', max_length=5000, verbose_name='column description')),
                ('measurementEquation', models.CharField(blank=True, max_length=255, verbose_name='measurement equation')),
                ('scanInterval', models.FloatField(blank=True, null=True, verbose_name='scan interval (time)')),
                ('recordingInterval', models.FloatField(blank=True, null=True, verbose_name='recording interval')),
                ('aggregationStatisticCV', models.ForeignKey(blank=True, db_column='aggregationStatisticCV', null=True, on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvAggregationStatistic', verbose_name='aggregation statistic')),
            ],
            options={
                'verbose_name': 'data logger file column',
                'db_table': 'ODM2.DataLoggerFileColumns',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DataLoggerFiles',
            fields=[
                ('dataLoggerFileId', models.AutoField(primary_key=True, serialize=False)),
                ('dataLoggerFileName', models.CharField(max_length=255, verbose_name='Data logger file name')),
                ('dataLoggerFileDescription', models.CharField(blank=True, max_length=5000, verbose_name='Data logger file description')),
                ('dataLoggerFileLink', models.FileField(upload_to='dataLoggerFiles', verbose_name='Data logger file')),
            ],
            options={
                'verbose_name': 'data logger file',
                'db_table': 'ODM2.DataLoggerFiles',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DataLoggerProgramFiles',
            fields=[
                ('programId', models.AutoField(primary_key=True, serialize=False)),
                ('programName', models.CharField(max_length=255)),
                ('programDescription', models.CharField(blank=True, max_length=5000)),
                ('programVersion', models.CharField(blank=True, max_length=50)),
                ('programFileLink', models.FileField(upload_to='dataLoggerProgramFiles')),
                ('affiliationId', models.ForeignKey(db_column='affiliationId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Affiliations')),
            ],
            options={
                'verbose_name': 'data logger program file',
                'db_table': 'ODM2.DataLoggerProgramFiles',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DataQuality',
            fields=[
                ('dataQualityId', models.AutoField(primary_key=True, serialize=False)),
                ('dataQualityCode', models.CharField(help_text='for an alarm test include the word alarm. for a hard bounds check include the word bound (if a value falls below a lower limit, or exceeds a lower limit the value will be set to NaN (not a number). ', max_length=255, verbose_name='data quality code')),
                ('dataQualityValue', models.FloatField(blank=True, null=True, verbose_name='data quality value')),
                ('dataQualityDescription', models.CharField(blank=True, max_length=5000, verbose_name='data quality description')),
                ('dataQualityLink', models.CharField(blank=True, max_length=255, verbose_name='data quality link')),
                ('dataQualityTypeCV', models.ForeignKey(db_column='dataQualityTypeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvDataQualityType', verbose_name='data quality type')),
            ],
            options={
                'verbose_name': 'data quality',
                'verbose_name_plural': 'data quality',
                'db_table': 'ODM2.DataQuality',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DatasetCitations',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('citationId', models.ForeignKey(db_column='citationId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Citations', verbose_name='citation')),
            ],
            options={
                'verbose_name': 'dataset citation',
                'db_table': 'ODM2.DatasetCitations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Datasets',
            fields=[
                ('datasetId', models.AutoField(primary_key=True, serialize=False)),
                ('datasetUUID', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('datasetCode', models.CharField(max_length=50, verbose_name='dataset code')),
                ('datasetTitle', models.CharField(max_length=255, verbose_name='dataset title')),
                ('datasetAbstract', models.CharField(max_length=5000, verbose_name='dataset abstract')),
                ('datasetTypeCV', models.ForeignKey(db_column='datasetTypeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvDatasetTypeCV', verbose_name='dataset type')),
            ],
            options={
                'verbose_name': 'dataset',
                'db_table': 'ODM2.Datasets',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DatasetsResults',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('datasetId', models.ForeignKey(db_column='datasetId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Datasets', verbose_name='dataset')),
            ],
            options={
                'verbose_name': 'dataset result',
                'db_table': 'ODM2.DatasetsResults',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DerivationEquations',
            fields=[
                ('derivationEquationId', models.AutoField(primary_key=True, serialize=False)),
                ('derivationEquation', models.CharField(max_length=255, verbose_name='derivation equation')),
            ],
            options={
                'verbose_name': 'derivation equation',
                'db_table': 'ODM2.DerivationEquations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Directives',
            fields=[
                ('directiveId', models.AutoField(primary_key=True, serialize=False)),
                ('directiveDescription', models.CharField(max_length=500)),
                ('directiveTypeCV', models.ForeignKey(db_column='directiveTypeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvDirectiveType')),
            ],
            options={
                'db_table': 'ODM2.Directives',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('equipmentId', models.AutoField(primary_key=True, serialize=False)),
                ('equipmentCode', models.CharField(max_length=50)),
                ('equipmentName', models.CharField(max_length=255)),
                ('equipmentSerialNumber', models.CharField(max_length=50)),
                ('equipmentPurchaseDate', models.DateTimeField()),
                ('equipmentPurchaseOrderNumber', models.CharField(blank=True, max_length=50)),
                ('equipmentDescription', models.CharField(blank=True, max_length=5000)),
                ('equipmentDocumentationLink', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'ODM2.Equipment',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EquipmentAnnotations',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('annotationId', models.ForeignKey(db_column='annotationId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Annotations')),
                ('equipmentId', models.ForeignKey(db_column='equipmentId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Equipment')),
            ],
            options={
                'db_table': 'ODM2.EquipmentAnnotations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EquipmentModels',
            fields=[
                ('equipmentModelId', models.AutoField(primary_key=True, serialize=False)),
                ('modelPartNumber', models.CharField(blank=True, max_length=50, verbose_name='model part number')),
                ('modelName', models.CharField(max_length=255, verbose_name='model name')),
                ('modelDescription', models.CharField(blank=True, max_length=5000, null=True, verbose_name='model description')),
                ('isInstrument', models.BooleanField(verbose_name='Is this an instrument?')),
                ('modelSpecificationsFileLink', models.CharField(blank=True, max_length=255, verbose_name='link to manual for equipment')),
                ('modelLink', models.CharField(blank=True, max_length=255, verbose_name='link to website for model')),
            ],
            options={
                'verbose_name': 'equipment model',
                'db_table': 'ODM2.EquipmentModels',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EquipmentUsed',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'ODM2.EquipmentUsed',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ExtensionProperties',
            fields=[
                ('propertyId', models.AutoField(primary_key=True, serialize=False)),
                ('propertyName', models.CharField(max_length=255, verbose_name='property name')),
                ('propertyDescription', models.CharField(blank=True, max_length=5000, verbose_name='property description')),
                ('propertyDataTypeCV', models.ForeignKey(db_column='propertyDataTypeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvPropertyDataType', verbose_name='property data type')),
            ],
            options={
                'verbose_name': 'extension property',
                'verbose_name_plural': 'extension properties',
                'db_table': 'ODM2.ExtensionProperties',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ExternalIdentifierSystems',
            fields=[
                ('externalIdentifierSystemId', models.AutoField(primary_key=True, serialize=False)),
                ('externalIdentifierSystemName', models.CharField(max_length=255)),
                ('externalIdentifierSystemDescription', models.CharField(blank=True, max_length=5000)),
                ('externalIdentifierSystemURL', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'ODM2.ExternalIdentifierSystems',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='FeatureActions',
            fields=[
                ('featureActionId', models.AutoField(primary_key=True, serialize=False, verbose_name='sampling feature action')),
            ],
            options={
                'verbose_name': 'action at sampling feature',
                'verbose_name_plural': 'action at sampling feature',
                'db_table': 'ODM2.FeatureActions',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='FeatureActionsNames',
            fields=[
                ('featureActionNamesId', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=500)),
            ],
            options={
                'verbose_name': 'feature action names',
                'db_table': 'ODM2EXTRA.FeatureActionsNames',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='InstrumentOutputVariables',
            fields=[
                ('instrumentOutputVariableId', models.AutoField(primary_key=True, serialize=False)),
                ('instrumentResolution', models.CharField(blank=True, max_length=255, verbose_name='instrument resolution')),
                ('instrumentAccuracy', models.CharField(blank=True, max_length=255, verbose_name='instrument accuracy')),
            ],
            options={
                'verbose_name': 'instrument output variable',
                'db_table': 'ODM2.InstrumentOutputVariables',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MeasurementResultValueAnnotations',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('annotationId', models.ForeignKey(db_column='annotationId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Annotations')),
            ],
            options={
                'db_table': 'ODM2.MeasurementResultValueAnnotations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MeasurementResultValueFile',
            fields=[
                ('valueFileid', models.AutoField(primary_key=True, serialize=False)),
                ('valueFile', models.FileField(upload_to='resultValues', verbose_name='value file ')),
            ],
            options={
                'verbose_name': 'measurement result value file',
                'db_table': 'ODM2EXTRA.MeasurementResultValuefile',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MeasurementResultValues',
            fields=[
                ('valueId', models.AutoField(primary_key=True, serialize=False)),
                ('dataValue', models.FloatField(verbose_name='data value')),
                ('valueDateTime', models.DateTimeField(verbose_name='value date time')),
                ('valueDateTimeUtcOffset', models.IntegerField(default=-5, verbose_name='value date time UTC offset')),
            ],
            options={
                'verbose_name': 'measurement result value',
                'db_table': 'ODM2.MeasurementResultValues',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MethodAnnotations',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('annotationId', models.ForeignKey(db_column='annotationId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Annotations')),
            ],
            options={
                'db_table': 'ODM2.MethodAnnotations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MethodCitations',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('citationId', models.ForeignKey(db_column='citationId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Citations', verbose_name='citation')),
            ],
            options={
                'verbose_name': 'method citation',
                'db_table': 'ODM2.MethodCitations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MethodExtensionPropertyValues',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('propertyValue', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'ODM2.MethodExtensionPropertyValues',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MethodExternalIdentifiers',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('methodExternalIdentifier', models.CharField(max_length=255)),
                ('methodExternalIdentifierURI', models.CharField(blank=True, max_length=255)),
                ('externalIdentifierSystemId', models.ForeignKey(db_column='externalIdentifierSystemId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.ExternalIdentifierSystems')),
            ],
            options={
                'db_table': 'ODM2.MethodExternalIdentifiers',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Methods',
            fields=[
                ('methodId', models.AutoField(primary_key=True, serialize=False)),
                ('methodCode', models.CharField(max_length=50, verbose_name='method code')),
                ('methodName', models.CharField(max_length=255, verbose_name='method name')),
                ('methodDescription', models.CharField(blank=True, max_length=5000, verbose_name='method description')),
                ('methodLink', models.CharField(blank=True, max_length=255, verbose_name='web link for method')),
                ('methodTypeCV', models.ForeignKey(db_column='methodTypeCV', help_text='A vocabulary for describing types of Methods associated with creating observations. MethodTypes correspond with ActionTypes in ODM2. An Action must be performed using an appropriate MethodType - e.g., a specimen collection Action should be associated with a specimen collection method. details for individual values here: http://vocabulary.odm2.org/methodtype/', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvMethodType', verbose_name='method type')),
            ],
            options={
                'verbose_name': 'method',
                'db_table': 'ODM2.Methods',
                'ordering': ['methodName'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ModelAffiliations',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('isPrimary', models.BooleanField()),
                ('roleDescription', models.CharField(blank=True, max_length=5000)),
                ('affiliationId', models.ForeignKey(db_column='affiliationId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Affiliations')),
            ],
            options={
                'db_table': 'ODM2.ModelAffiliations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Models',
            fields=[
                ('modelId', models.AutoField(primary_key=True, serialize=False)),
                ('modelCode', models.CharField(max_length=50)),
                ('modelName', models.CharField(max_length=255)),
                ('modelDescription', models.CharField(blank=True, max_length=5000)),
                ('version', models.CharField(blank=True, max_length=255)),
                ('modelLink', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'ODM2.Models',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Organizations',
            fields=[
                ('organizationId', models.AutoField(primary_key=True, serialize=False)),
                ('organizationCode', models.CharField(max_length=50, verbose_name='organization code')),
                ('organizationName', models.CharField(max_length=255, verbose_name='organization name')),
                ('organizationDescription', models.CharField(blank=True, max_length=5000, verbose_name='organization description')),
                ('organizationLink', models.CharField(blank=True, max_length=255, verbose_name='organization web link')),
                ('organizationTypeCV', models.ForeignKey(db_column='organizationTypeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvOrganizationType', verbose_name='organization type')),
                ('parentOrganizationId', models.ForeignKey(blank=True, db_column='parentOrganizationId', default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Organizations', verbose_name='parent organization')),
            ],
            options={
                'verbose_name': 'Organization',
                'db_table': 'ODM2.Organizations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='People',
            fields=[
                ('personId', models.AutoField(primary_key=True, serialize=False)),
                ('personFirstName', models.CharField(max_length=255, verbose_name='first name')),
                ('personMiddleName', models.CharField(blank=True, max_length=255, verbose_name='middle name')),
                ('personLastName', models.CharField(max_length=255, verbose_name='last name')),
            ],
            options={
                'verbose_name': 'people',
                'verbose_name_plural': 'people',
                'db_table': 'ODM2.People',
                'ordering': ['personLastName'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PersonExternalIdentifiers',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('personExternalIdentifier', models.CharField(max_length=255)),
                ('personExternalIdentifierURI', models.CharField(blank=True, max_length=255)),
                ('externalIdentifierSystemId', models.ForeignKey(db_column='externalIdentifierSystemId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.ExternalIdentifierSystems')),
                ('personId', models.ForeignKey(db_column='personId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.People')),
            ],
            options={
                'verbose_name_plural': 'ORC ID (Person Unique Identifier)',
                'db_table': 'ODM2.PersonExternalIdentifiers',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PointCoverageResultValueAnnotations',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('annotationId', models.ForeignKey(db_column='annotationId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Annotations')),
            ],
            options={
                'db_table': 'ODM2.PointCoverageResultValueAnnotations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PointCoverageResultValues',
            fields=[
                ('valueId', models.AutoField(primary_key=True, serialize=False)),
                ('dataValue', models.BigIntegerField()),
                ('valueDateTime', models.DateTimeField()),
                ('valueDateTimeUtcOffset', models.IntegerField()),
                ('xLocation', models.FloatField()),
                ('yLocation', models.FloatField()),
                ('censorCodeCV', models.ForeignKey(db_column='censorCodeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvCensorCode')),
                ('qualityCodeCV', models.ForeignKey(db_column='qualityCodeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvQualityCode')),
            ],
            options={
                'db_table': 'ODM2.PointCoverageResultValues',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ProcessDataLoggerFile',
            fields=[
                ('processDataLoggerFileId', models.AutoField(primary_key=True, serialize=False)),
                ('processingCode', models.CharField(default='0', help_text="to setup an FTP file download set the processingcode as 'x hours between download' where x is how many hours to wait between downloading copies of the file from the FTP site. A data logger file setup for FTP download must have only 1 process data logger file record.", max_length=255, verbose_name='processing code')),
                ('dataBeginsOn', models.IntegerField(default=2, verbose_name='Data begins on this row number')),
                ('columnHeadersOn', models.IntegerField(verbose_name='Column headers matching column labels from data logger columns on row')),
                ('dateProcessed', models.DateTimeField(auto_now=True)),
                ('dataLoggerFileId', models.ForeignKey(db_column='dataLoggerFileId', help_text='CAUTION data logger file columns must be setup, the date and time stamp is expected to be the first column,  column names must match the column name in associated dataLoggerFileColumns.', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.DataLoggerFiles', verbose_name='data logger file')),
            ],
            options={
                'verbose_name': 'process data logger file',
                'db_table': 'ODM2EXTRA.ProcessDataLoggerFile',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ProcessingLevels',
            fields=[
                ('processingLevelId', models.AutoField(primary_key=True, serialize=False)),
                ('processingLevelCode', models.CharField(max_length=50, verbose_name='processing level code')),
                ('definition', models.CharField(blank=True, max_length=5000)),
                ('explanation', models.CharField(blank=True, max_length=5000)),
            ],
            options={
                'verbose_name': 'processing level',
                'db_table': 'ODM2.ProcessingLevels',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ProfileResultValueAnnotations',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('annotationId', models.ForeignKey(db_column='annotationId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Annotations')),
            ],
            options={
                'db_table': 'ODM2.ProfileResultValueAnnotations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ProfileResultValues',
            fields=[
                ('valueId', models.AutoField(primary_key=True, serialize=False)),
                ('dataValue', models.FloatField(verbose_name='data value')),
                ('valueDateTime', models.DateTimeField(blank=True, null=True, verbose_name='value date and time')),
                ('valueDateTimeUtcOffset', models.IntegerField(blank=True, null=True, verbose_name='value date and time UTC offset')),
                ('zLocation', models.FloatField(blank=True, null=True, verbose_name='z location')),
                ('zAggregationInterval', models.FloatField(blank=True, null=True, verbose_name='z aggregation interval')),
                ('timeAggregationInterval', models.FloatField(blank=True, null=True, verbose_name='time aggregation interval')),
                ('censorCodeCV', models.ForeignKey(db_column='censorcodecv', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvCensorCode', verbose_name='censor code')),
                ('qualityCodeCV', models.ForeignKey(db_column='qualitycodecv', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvQualityCode', verbose_name='quality code')),
            ],
            options={
                'verbose_name': 'profile result value',
                'db_table': 'ODM2.ProfileResultValues',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ReferenceMaterialExternalIdentifiers',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('referenceMaterialExternalIdentifier', models.CharField(max_length=255)),
                ('referenceMaterialExternalIdentifierURI', models.CharField(blank=True, max_length=255)),
                ('externalIdentifierSystemId', models.ForeignKey(db_column='externalIdentifierSystemId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.ExternalIdentifierSystems')),
            ],
            options={
                'db_table': 'ODM2.ReferenceMaterialExternalIdentifiers',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ReferenceMaterials',
            fields=[
                ('referenceMaterialId', models.AutoField(primary_key=True, serialize=False)),
                ('referenceMaterialCode', models.CharField(max_length=50)),
                ('referenceMaterialLotCode', models.CharField(blank=True, max_length=255)),
                ('referenceMaterialPurchaseDate', models.DateTimeField(blank=True, null=True)),
                ('referenceMaterialExpirationDate', models.DateTimeField(blank=True, null=True)),
                ('referenceMaterialCertificateLink', models.CharField(blank=True, max_length=255)),
                ('referenceMaterialMediumCV', models.ForeignKey(db_column='referenceMaterialMediumCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvReferenceMaterialMedium')),
                ('referenceMaterialOrganizationId', models.ForeignKey(db_column='referenceMaterialOrganizationId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Organizations')),
            ],
            options={
                'db_table': 'ODM2.ReferenceMaterials',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ReferenceMaterialValues',
            fields=[
                ('referenceMaterialValueId', models.AutoField(primary_key=True, serialize=False)),
                ('referenceMaterialValue', models.FloatField()),
                ('referenceMaterialAccuracy', models.FloatField(blank=True, null=True)),
                ('citationId', models.ForeignKey(db_column='citationid', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Citations')),
                ('referenceMaterialId', models.ForeignKey(db_column='referencematerialId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.ReferenceMaterials')),
            ],
            options={
                'db_table': 'ODM2.ReferenceMaterialValues',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RelatedActions',
            fields=[
                ('relationId', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name': 'related action (associates one action with another)',
                'verbose_name_plural': 'related action (associates one action with another)',
                'db_table': 'ODM2.RelatedActions',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RelatedAnnotations',
            fields=[
                ('relationId', models.AutoField(primary_key=True, serialize=False)),
                ('annotationId', models.ForeignKey(db_column='annotationId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Annotations')),
                ('relatedAnnotationId', models.ForeignKey(db_column='relatedAnnotationId', on_delete=django.db.models.deletion.CASCADE, related_name='RelatedAnnotations', to='odm2admin.Annotations')),
                ('relationshipTypeCV', models.ForeignKey(db_column='relationshipTypeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvRelationshipType')),
            ],
            options={
                'db_table': 'ODM2.RelatedAnnotations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RelatedCitations',
            fields=[
                ('relationId', models.AutoField(primary_key=True, serialize=False)),
                ('citationId', models.ForeignKey(db_column='citationId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Citations')),
                ('relatedCitationId', models.ForeignKey(db_column='relatedCitationId', on_delete=django.db.models.deletion.CASCADE, related_name='RelatedCitations', to='odm2admin.Citations')),
                ('relationshipTypeCV', models.ForeignKey(db_column='relationshipTypeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvRelationshipType')),
            ],
            options={
                'db_table': 'ODM2.RelatedCitations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RelatedDatasets',
            fields=[
                ('relationId', models.AutoField(primary_key=True, serialize=False)),
                ('versionCode', models.CharField(blank=True, max_length=50)),
                ('datasetId', models.ForeignKey(db_column='datasetId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Datasets')),
                ('relatedDatasetId', models.ForeignKey(db_column='relatedDatasetId', on_delete=django.db.models.deletion.CASCADE, related_name='relatedDataset', to='odm2admin.Datasets')),
                ('relationshipTypeCV', models.ForeignKey(db_column='relationshipTypeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvRelationshipType')),
            ],
            options={
                'db_table': 'ODM2.RelatedDatasets',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RelatedEquipment',
            fields=[
                ('relationId', models.AutoField(primary_key=True, serialize=False)),
                ('relationshipStartDateTime', models.DateTimeField()),
                ('relationshipStartDateTimeUtcOffset', models.IntegerField()),
                ('relationshipEndDateTime', models.DateTimeField(blank=True, null=True)),
                ('relationshipEndDateTimeUtcOffset', models.IntegerField(blank=True, null=True)),
                ('equipmentId', models.ForeignKey(db_column='equipmentId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Equipment')),
                ('relatedEquipmentId', models.ForeignKey(db_column='relatedEquipmentId', on_delete=django.db.models.deletion.CASCADE, related_name='relatedEquipment', to='odm2admin.Equipment')),
                ('relationshipTypeCV', models.ForeignKey(db_column='relationshipTypeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvRelationshipType')),
            ],
            options={
                'db_table': 'ODM2.RelatedEquipment',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RelatedFeatures',
            fields=[
                ('relationId', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name': 'relate two feature',
                'db_table': 'ODM2.RelatedFeatures',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RelatedModels',
            fields=[
                ('relatedId', models.AutoField(primary_key=True, serialize=False)),
                ('relatedModelId', models.IntegerField()),
                ('modelId', models.ForeignKey(db_column='modelId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Models')),
                ('relationshipTypeCV', models.ForeignKey(db_column='relationshipTypeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvRelationshipType')),
            ],
            options={
                'db_table': 'ODM2.RelatedModels',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RelatedResults',
            fields=[
                ('relationId', models.AutoField(primary_key=True, serialize=False)),
                ('versionCode', models.CharField(blank=True, max_length=50, verbose_name='version code')),
                ('relatedResultSequenceNumber', models.IntegerField(blank=True, null=True, verbose_name='related result sequence number')),
            ],
            options={
                'verbose_name': 'related result',
                'db_table': 'ODM2.RelatedResults',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ResultAnnotations',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('beginDateTime', models.DateTimeField()),
                ('endDateTime', models.DateTimeField()),
                ('annotationId', models.ForeignKey(db_column='annotationId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Annotations')),
            ],
            options={
                'db_table': 'ODM2.ResultAnnotations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ResultExtensionPropertyValues',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('propertyValue', models.CharField(max_length=255)),
                ('propertyId', models.ForeignKey(db_column='propertyId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.ExtensionProperties')),
            ],
            options={
                'db_table': 'ODM2.ResultExtensionPropertyValues',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Results',
            fields=[
                ('resultId', models.AutoField(primary_key=True, serialize=False, verbose_name='data result')),
                ('resultUUID', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('resultDateTime', models.DateTimeField(blank=True, null=True, verbose_name='Start result date time')),
                ('resultDateTimeUtcOffset', models.BigIntegerField(default=4, null=True, verbose_name='Start result date time UTC offset')),
                ('validDateTime', models.DateTimeField(blank=True, null=True, verbose_name='valid date time - Date and time for which the result is valid')),
                ('validDateTimeUtcOffset', models.BigIntegerField(default=4, null=True, verbose_name='valid date time UTC offset')),
                ('valueCount', models.IntegerField(verbose_name='number of recorded values')),
            ],
            options={
                'verbose_name': 'data result',
                'db_table': 'ODM2.Results',
                'ordering': ['variableId'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ResultsDataQuality',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('dataQualityId', models.ForeignKey(db_column='dataqualityid', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.DataQuality', verbose_name='data quality')),
            ],
            options={
                'verbose_name': 'results data quality',
                'verbose_name_plural': 'results data quality',
                'db_table': 'ODM2.ResultsDataQuality',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SamplingFeatureAnnotations',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('annotationId', models.ForeignKey(db_column='annotationId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Annotations')),
            ],
            options={
                'db_table': 'ODM2.SamplingFeatureAnnotations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SamplingFeatureExtensionPropertyValues',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('propertyValue', models.CharField(max_length=255)),
                ('propertyId', models.ForeignKey(db_column='propertyid', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.ExtensionProperties')),
            ],
            options={
                'db_table': 'ODM2.SamplingFeatureExtensionPropertyValues',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SamplingFeatureExternalIdentifiers',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('samplingFeatureExternalIdentifier', models.CharField(max_length=255)),
                ('samplingFeatureExternalIdentifierURI', models.CharField(blank=True, max_length=255)),
                ('externalIdentifierSystemId', models.ForeignKey(db_column='externalIdentifierSystemId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.ExternalIdentifierSystems')),
            ],
            options={
                'db_table': 'ODM2.SamplingFeatureExternalIdentifiers',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SamplingFeatures',
            fields=[
                ('samplingFeatureId', models.AutoField(primary_key=True, serialize=False)),
                ('samplingFeatureUUID', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('samplingFeatureCode', models.CharField(max_length=50, verbose_name='sampling feature or location code')),
                ('samplingFeatureName', models.CharField(blank=True, max_length=255, null=True, verbose_name='sampling feature or location name')),
                ('samplingFeatureDescription', models.CharField(blank=True, max_length=5000, verbose_name='sampling feature or location description')),
                ('featureGeometry', models.TextField(blank=True, null=True, verbose_name='feature geometry')),
                ('elevation_m', models.FloatField(blank=True, null=True, verbose_name='elevation')),
            ],
            options={
                'verbose_name': 'sampling feature (location)',
                'db_table': 'ODM2.SamplingFeatures',
                'ordering': ('samplingFeatureType', 'samplingFeatureName'),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SectionResultValueAnnotations',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('annotationId', models.ForeignKey(db_column='annotationId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Annotations')),
            ],
            options={
                'db_table': 'ODM2.SectionResultValueAnnotations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SectionResultValues',
            fields=[
                ('valueId', models.AutoField(primary_key=True, serialize=False)),
                ('dataValue', models.FloatField()),
                ('valueDateTime', models.BigIntegerField()),
                ('valueDateTimeUtcOffset', models.BigIntegerField()),
                ('xLocation', models.FloatField()),
                ('xAggregationInterval', models.FloatField()),
                ('zLocation', models.BigIntegerField()),
                ('zAggregationInterval', models.FloatField()),
                ('timeAggregationInterval', models.FloatField()),
                ('aggregationStatisticCV', models.ForeignKey(db_column='aggregationStatisticCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvAggregationStatistic')),
                ('censorCodeCV', models.ForeignKey(db_column='censorCodeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvCensorCode')),
                ('qualityCodeCV', models.ForeignKey(db_column='qualityCodeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvQualityCode')),
            ],
            options={
                'db_table': 'ODM2.SectionResultValues',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Simulations',
            fields=[
                ('simulationId', models.AutoField(primary_key=True, serialize=False)),
                ('simulationName', models.CharField(max_length=255)),
                ('simulationDescription', models.CharField(blank=True, max_length=5000)),
                ('simulationStartDateTime', models.DateTimeField()),
                ('simulationStartDateTimeUtcOffset', models.IntegerField()),
                ('simulationEndDateTime', models.DateTimeField()),
                ('simulationEndDateTimeUtcOffset', models.IntegerField()),
                ('timeStepValue', models.FloatField()),
                ('timeStepUnitsId', models.IntegerField()),
                ('inputDatasetId', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'ODM2.Simulations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SpatialOffsets',
            fields=[
                ('spatialOffsetId', models.AutoField(primary_key=True, serialize=False)),
                ('offset1Value', models.FloatField()),
                ('offset2Value', models.FloatField(blank=True, null=True)),
                ('offset3Value', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'ODM2.SpatialOffsets',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SpatialReferenceExternalIdentifiers',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('spatialReferenceExternalIdentifier', models.CharField(max_length=255)),
                ('spatialReferenceExternalIdentifierURI', models.CharField(blank=True, max_length=255)),
                ('externalIdentifierSystemId', models.ForeignKey(db_column='externalIdentifierSystemId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.ExternalIdentifierSystems')),
            ],
            options={
                'db_table': 'ODM2.SpatialReferenceExternalIdentifiers',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SpatialReferences',
            fields=[
                ('spatialReferenceId', models.AutoField(primary_key=True, serialize=False, verbose_name='spatial reference id')),
                ('SRSCode', models.CharField(blank=True, max_length=50, verbose_name='spatial reference code')),
                ('SRSName', models.CharField(max_length=255, verbose_name='spatial reference name')),
                ('SRSDescription', models.CharField(blank=True, max_length=5000, verbose_name='spatial reference description')),
                ('SRSLink', models.CharField(blank=True, max_length=255, verbose_name='spatial reference link')),
            ],
            options={
                'verbose_name': 'Spatial reference',
                'db_table': 'ODM2.SpatialReferences',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SpecimenTaxonomicClassifiers',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('citationId', models.ForeignKey(blank=True, db_column='citationId', null=True, on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Citations')),
            ],
            options={
                'db_table': 'ODM2.SpecimenTaxonomicClassifiers',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SpectraResultValueAnnotations',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('annotationId', models.ForeignKey(db_column='annotationId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Annotations')),
            ],
            options={
                'db_table': 'ODM2.SpectraResultValueAnnotations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SpectraResultValues',
            fields=[
                ('valueId', models.AutoField(primary_key=True, serialize=False)),
                ('dataValue', models.FloatField()),
                ('valueDateTime', models.DateTimeField()),
                ('valueDateTimeUtcOffset', models.IntegerField()),
                ('excitationWaveLength', models.FloatField()),
                ('emissionVaveLength', models.FloatField()),
                ('timeAggregationInterval', models.FloatField()),
                ('censorCodeCV', models.ForeignKey(db_column='censorCodeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvCensorCode')),
                ('qualityCodeCV', models.ForeignKey(db_column='qualityCodeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvQualityCode')),
            ],
            options={
                'db_table': 'ODM2.SpectraResultValues',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TaxonomicClassifierExternalIdentifiers',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('taxonomicClassifierExternalIdentifier', models.CharField(max_length=255)),
                ('taxonomicClassifierExternalIdentifierURI', models.CharField(blank=True, max_length=255)),
                ('externalIdentifierSystemId', models.ForeignKey(db_column='externalIdentifierSystemId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.ExternalIdentifierSystems')),
            ],
            options={
                'db_table': 'ODM2.TaxonomicClassifierExternalIdentifiers',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TaxonomicClassifiers',
            fields=[
                ('taxonomicClassifierId', models.AutoField(primary_key=True, serialize=False)),
                ('taxonomicClassifierName', models.CharField(max_length=255, verbose_name='taxonomic classifier name')),
                ('taxonomicClassifierCommonName', models.CharField(blank=True, max_length=255, verbose_name='taxonomic classifier common name')),
                ('taxonomicClassifierDescription', models.CharField(blank=True, max_length=5000, verbose_name='taxonomic classifier description')),
                ('parentTaxonomicClassifier', models.ForeignKey(blank=True, db_column='parentTaxonomicClassifierId', null=True, on_delete=django.db.models.deletion.CASCADE, to='odm2admin.TaxonomicClassifiers')),
                ('taxonomicClassifierType', models.ForeignKey(db_column='taxonomicClassifierTypeCV', help_text='A vocabulary for describing types of taxonomies from which descriptive terms used in an ODM2 database have been drawn. Taxonomic classifiers provide a way to classify Results and Specimens according to terms from a formal taxonomy.. Check http://vocabulary.odm2.org/taxonomicclassifierType/ for more info', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvTaxonomicClassifierType')),
            ],
            options={
                'verbose_name': 'taxonomic classifier',
                'db_table': 'ODM2.TaxonomicClassifiers',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TimeSeriesResultValueAnnotations',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('annotationId', models.ForeignKey(db_column='annotationId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Annotations')),
            ],
            options={
                'db_table': 'ODM2.TimeSeriesResultValueAnnotations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TimeSeriesResultValues',
            fields=[
                ('valueId', models.AutoField(primary_key=True, serialize=False)),
                ('dataValue', models.FloatField()),
                ('valueDateTime', models.DateTimeField()),
                ('valueDateTimeUtcOffset', models.IntegerField()),
                ('timeAggregationInterval', models.FloatField(verbose_name='Time Interval')),
                ('censorCodeCV', models.ForeignKey(db_column='censorCodeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvCensorCode')),
                ('qualityCodeCV', models.ForeignKey(db_column='qualityCodeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvQualityCode')),
            ],
            options={
                'verbose_name': 'time series result value',
                'db_table': 'ODM2.TimeSeriesResultValues',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TimeSeriesResultValuesExt',
            fields=[
                ('valueId', models.AutoField(primary_key=True, serialize=False)),
                ('dataValue', models.FloatField()),
                ('valueDateTime', models.DateTimeField()),
                ('valueDateTimeUtcOffset', models.IntegerField()),
                ('timeAggregationInterval', models.FloatField(verbose_name='Time Interval')),
                ('samplingFeatureName', models.CharField(blank=True, max_length=255, null=True, verbose_name='sampling feature name')),
                ('processingLevelCode', models.CharField(max_length=50, verbose_name='processing level code')),
                ('variableCode', models.CharField(max_length=50, verbose_name='variable code')),
                ('unitsAbbreviation', models.CharField(max_length=50, verbose_name='unit abbreviation')),
                ('aggregationStatisticName', models.CharField(max_length=255)),
                ('censorCodeCV', models.ForeignKey(db_column='censorCodeCV', on_delete=django.db.models.deletion.DO_NOTHING, to='odm2admin.CvCensorCode')),
                ('qualityCodeCV', models.ForeignKey(db_column='qualityCodeCV', on_delete=django.db.models.deletion.DO_NOTHING, to='odm2admin.CvQualityCode')),
                ('samplingFeatureType', models.ForeignKey(db_column='samplingFeatureTypeCV', on_delete=django.db.models.deletion.DO_NOTHING, to='odm2admin.CvSamplingFeatureType')),
            ],
            options={
                'verbose_name': 'time series result value',
                'db_table': 'ODM2EXTRA.TimeSeriesResultValuesExt',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TimeSeriesResultValuesExtAnnotations',
            fields=[
                ('valueId', models.AutoField(primary_key=True, serialize=False)),
                ('resultId', models.IntegerField()),
                ('dataValue', models.FloatField()),
                ('valueDateTime', models.DateTimeField()),
                ('valueDateTimeUtcOffset', models.IntegerField()),
                ('censorCodeCV', models.CharField(max_length=255)),
                ('qualityCodeCV', models.CharField(max_length=255)),
                ('timeAggregationInterval', models.FloatField(verbose_name='Time Interval')),
                ('timeAggregationIntervalUnitsId', models.IntegerField()),
                ('samplingFeatureName', models.CharField(blank=True, max_length=255, null=True, verbose_name='sampling feature name')),
                ('samplingFeatureTypeCV', models.CharField(max_length=255)),
                ('processingLevelCode', models.CharField(max_length=50, verbose_name='processing level code')),
                ('variableCode', models.CharField(max_length=50, verbose_name='variable code')),
                ('unitsAbbreviation', models.CharField(max_length=50, verbose_name='unit abbreviation')),
                ('aggregationStatisticName', models.CharField(max_length=255)),
                ('annotationText', models.CharField(max_length=500)),
            ],
            options={
                'verbose_name': 'time series result value',
                'db_table': 'ODM2EXTRA.TimeSeriesResultValuesExtwAnnotations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TrajectoryResultValueAnnotations',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('annotationId', models.ForeignKey(db_column='annotationId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Annotations')),
            ],
            options={
                'db_table': 'ODM2.TrajectoryResultValueAnnotations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TrajectoryResultValues',
            fields=[
                ('valueId', models.AutoField(primary_key=True, serialize=False)),
                ('dataValue', models.FloatField()),
                ('valueDateTime', models.DateTimeField()),
                ('valueDateTimeUtcOffset', models.IntegerField()),
                ('xLocation', models.FloatField()),
                ('yLocation', models.FloatField()),
                ('zLocation', models.FloatField()),
                ('trajectoryDistance', models.FloatField()),
                ('trajectoryDistanceAggregationInterval', models.FloatField()),
                ('timeAggregationInterval', models.FloatField()),
                ('censorCodeCV', models.ForeignKey(db_column='censorCodeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvCensorCode')),
                ('qualityCodeCV', models.ForeignKey(db_column='qualityCodeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvQualityCode')),
            ],
            options={
                'db_table': 'ODM2.TrajectoryResultValues',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TransectResultValueAnnotations',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('annotationId', models.ForeignKey(db_column='annotationId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Annotations')),
            ],
            options={
                'db_table': 'ODM2.TransectResultValueAnnotations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TransectResultValues',
            fields=[
                ('valueId', models.AutoField(primary_key=True, serialize=False)),
                ('dataValue', models.FloatField()),
                ('valueDateTime', models.DateTimeField()),
                ('valueDateTimeUtcOffset', models.DateTimeField()),
                ('xLocation', models.FloatField()),
                ('yLocation', models.FloatField()),
                ('transectDistance', models.FloatField()),
                ('transectDistanceAggregationInterval', models.FloatField()),
                ('timeAggregationInterval', models.FloatField()),
                ('aggregationStatisticCV', models.ForeignKey(db_column='aggregationStatisticCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvAggregationStatistic')),
                ('censorCodeCV', models.ForeignKey(db_column='censorCodeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvCensorCode')),
                ('qualityCodeCV', models.ForeignKey(db_column='qualityCodeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvQualityCode')),
            ],
            options={
                'db_table': 'ODM2.TransectResultValues',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Units',
            fields=[
                ('unitsId', models.AutoField(primary_key=True, serialize=False)),
                ('unitsAbbreviation', models.CharField(max_length=50, verbose_name='unit abbreviation')),
                ('unitsName', models.CharField(max_length=255, verbose_name='unit name')),
                ('unitsLink', models.CharField(blank=True, max_length=255, verbose_name='reference for the unit (web link)')),
                ('unit_type', models.ForeignKey(db_column='unitsTypeCV', help_text='A vocabulary for describing the type of the Unit or the more general quantity that the Unit represents. View unit type details here http://vocabulary.odm2.org/unitstype/', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvUnitsType')),
            ],
            options={
                'verbose_name': 'unit',
                'db_table': 'ODM2.Units',
                'ordering': ('unitsAbbreviation', 'unitsName'),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='VariableExtensionPropertyValues',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('propertyValue', models.CharField(max_length=255)),
                ('propertyId', models.ForeignKey(db_column='propertyId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.ExtensionProperties')),
            ],
            options={
                'db_table': 'ODM2.VariableExtensionPropertyValues',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='VariableExternalIdentifiers',
            fields=[
                ('bridgeId', models.AutoField(primary_key=True, serialize=False)),
                ('variableExternalIdentifier', models.CharField(max_length=255)),
                ('variableExternalIdentifierURI', models.CharField(blank=True, max_length=255)),
                ('externalIdentifierSystemId', models.ForeignKey(db_column='externalIdentifierSystemId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.ExternalIdentifierSystems')),
            ],
            options={
                'db_table': 'ODM2.VariableExternalIdentifiers',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Variables',
            fields=[
                ('variableId', models.AutoField(primary_key=True, serialize=False)),
                ('variableCode', models.CharField(max_length=50, verbose_name='variable code')),
                ('variableDefinition', models.CharField(blank=True, max_length=500, verbose_name='variable definition')),
                ('noDataValue', models.FloatField(verbose_name='no data value')),
                ('speciation', models.ForeignKey(blank=True, db_column='speciationCV', null=True, on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvSpeciation')),
                ('variableName', models.ForeignKey(db_column='variableNameCV', help_text='view variable names here http://vocabulary.odm2.org/variablename/', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvVariableName')),
                ('variableType', models.ForeignKey(db_column='variableTypeCV', help_text='view variable types here http://vocabulary.odm2.org/variabletype/ ', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvVariableType')),
            ],
            options={
                'verbose_name': 'variable',
                'db_table': 'ODM2.Variables',
                'ordering': ('variableCode', 'variableName'),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CalibrationActions',
            fields=[
                ('actionId', models.OneToOneField(db_column='actionId', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='odm2admin.Actions')),
                ('calibrationCheckValue', models.FloatField(blank=True, null=True)),
                ('calibrationEquation', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'ODM2.CalibrationActions',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CategoricalResults',
            fields=[
                ('resultId', models.OneToOneField(db_column='resultId', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='odm2admin.Results')),
                ('xLocation', models.FloatField(blank=True, null=True)),
                ('xLocationUnitsId', models.IntegerField(blank=True, null=True)),
                ('yLocation', models.FloatField(blank=True, null=True)),
                ('yLocationUnitsId', models.IntegerField(blank=True, null=True)),
                ('zLocation', models.FloatField(blank=True, null=True)),
                ('zLocationUnitsId', models.IntegerField(blank=True, null=True)),
                ('qualityCodeCV', models.ForeignKey(db_column='qualityCodeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvQualityCode')),
                ('spatialReferenceId', models.ForeignKey(blank=True, db_column='spatialReferenceId', null=True, on_delete=django.db.models.deletion.CASCADE, to='odm2admin.SpatialReferences')),
            ],
            options={
                'db_table': 'ODM2.CategoricalResults',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MaintenanceActions',
            fields=[
                ('actionId', models.OneToOneField(db_column='actionId', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='odm2admin.Actions')),
                ('isFactoryService', models.BooleanField()),
                ('maintenanceCode', models.CharField(blank=True, max_length=50)),
                ('maintenanceReason', models.CharField(blank=True, max_length=500)),
            ],
            options={
                'db_table': 'ODM2.MaintenanceActions',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MeasurementResults',
            fields=[
                ('resultId', models.OneToOneField(db_column='resultId', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='odm2admin.Results', verbose_name='Result Series')),
                ('xLocation', models.FloatField(blank=True, null=True, verbose_name='x location')),
                ('yLocation', models.FloatField(blank=True, null=True, verbose_name='y location')),
                ('zLocation', models.FloatField(blank=True, null=True, verbose_name='z location')),
                ('timeAggregationInterval', models.FloatField(verbose_name='time aggregation interval')),
                ('aggregationStatisticCV', models.ForeignKey(db_column='aggregationStatisticCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvAggregationStatistic', verbose_name='aggregation statistic')),
                ('censorCodeCV', models.ForeignKey(db_column='censorCodeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvCensorCode', verbose_name='censor code')),
                ('qualityCodeCV', models.ForeignKey(db_column='qualitycodecv', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvQualityCode', verbose_name='quality code')),
                ('spatialReferenceId', models.ForeignKey(blank=True, db_column='spatialReferenceId', null=True, on_delete=django.db.models.deletion.CASCADE, to='odm2admin.SpatialReferences', verbose_name='spatial reference')),
                ('timeAggregationIntervalUnitsId', models.ForeignKey(db_column='timeaggregationintervalunitsid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units', verbose_name='time aggregation interval unit')),
                ('xLocationUnitsId', models.ForeignKey(blank=True, db_column='xLocationUnitsId', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='relatedXLocationUnits', to='odm2admin.Units', verbose_name='x location units')),
                ('yLocationUnitsId', models.ForeignKey(blank=True, db_column='yLocationUnitsId', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='relatedYLocationUnits', to='odm2admin.Units', verbose_name='y location units')),
                ('zLocationUnitsId', models.ForeignKey(blank=True, db_column='zLocationUnitsId', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='relatedZLocationUnits', to='odm2admin.Units', verbose_name='z location units')),
            ],
            options={
                'verbose_name': 'measurement result',
                'db_table': 'ODM2.MeasurementResults',
                'ordering': ['censorCodeCV', 'resultId'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PointCoverageResults',
            fields=[
                ('resultId', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='odm2admin.Results')),
                ('zLocation', models.FloatField(blank=True, null=True)),
                ('intendedXSpacing', models.FloatField(blank=True, null=True)),
                ('intendedYSpacing', models.FloatField(blank=True, null=True)),
                ('timeAggregationInterval', models.FloatField()),
                ('timeAggregationIntervalUnitsId', models.IntegerField()),
                ('aggregationStatisticCV', models.ForeignKey(db_column='aggregationStatisticCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvAggregationStatistic')),
                ('intendedXSpacingUnitsId', models.ForeignKey(blank=True, db_column='intendedXSpacingUnitsId', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units')),
                ('intendedYSpacingUnitsId', models.ForeignKey(blank=True, db_column='intendedYSpacingUnitsId', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units')),
                ('spatialReferenceId', models.ForeignKey(blank=True, db_column='spatialReferenceId', null=True, on_delete=django.db.models.deletion.CASCADE, to='odm2admin.SpatialReferences')),
                ('zLocationUnitsId', models.ForeignKey(blank=True, db_column='zLocationUnitsId', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units')),
            ],
            options={
                'db_table': 'ODM2.PointCoverageResults',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ProfileResults',
            fields=[
                ('resultId', models.OneToOneField(db_column='resultId', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='odm2admin.Results', verbose_name='result')),
                ('xLocation', models.FloatField(blank=True, null=True, verbose_name='x location')),
                ('yLocation', models.FloatField(blank=True, null=True, verbose_name='y location')),
                ('intendedZSpacing', models.FloatField(blank=True, null=True, verbose_name='intended depth')),
                ('intendedTimeSpacing', models.FloatField(blank=True, null=True, verbose_name='intended time spacing')),
                ('aggregationStatisticCV', models.ForeignKey(db_column='aggregationStatisticCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvAggregationStatistic', verbose_name='aggregation statistic')),
                ('intendedTimeSpacingUnitsId', models.ForeignKey(blank=True, db_column='intendedTimeSpacingUnitsId', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units', verbose_name='intended time spacing unit')),
                ('intendedZSpacingUnitsId', models.ForeignKey(blank=True, db_column='intendedZSpacingUnitsId', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units', verbose_name='intended depth units')),
                ('spatialReferenceId', models.ForeignKey(blank=True, db_column='spatialReferenceId', null=True, on_delete=django.db.models.deletion.CASCADE, to='odm2admin.SpatialReferences', verbose_name='spatial reference')),
                ('xLocationUnitsId', models.ForeignKey(blank=True, db_column='xLocationUnitsId', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units', verbose_name='x location units')),
                ('yLocationUnitsId', models.ForeignKey(blank=True, db_column='yLocationUnitsId', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units', verbose_name='y location units')),
            ],
            options={
                'verbose_name': 'profile result',
                'db_table': 'ODM2.ProfileResults',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ResultDerivationEquations',
            fields=[
                ('resultId', models.OneToOneField(db_column='resultId', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='odm2admin.Results', verbose_name='data result')),
                ('derivationEquationId', models.ForeignKey(db_column='derivationEquationId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.DerivationEquations')),
            ],
            options={
                'verbose_name': 'result derivation equation',
                'db_table': 'ODM2.ResultDerivationEquations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ResultNormalizationValues',
            fields=[
                ('resultId', models.OneToOneField(db_column='resultId', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='odm2admin.Results')),
            ],
            options={
                'db_table': 'ODM2.ResultNormalizationValues',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SectionResults',
            fields=[
                ('resultId', models.OneToOneField(db_column='resultId', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='odm2admin.Results')),
                ('yLocation', models.FloatField(blank=True, null=True)),
                ('intendedXSpacing', models.FloatField(blank=True, null=True)),
                ('intendedZSpacing', models.FloatField(blank=True, null=True)),
                ('intendedTimeSpacing', models.FloatField(blank=True, null=True)),
                ('aggregationStatisticCV', models.ForeignKey(db_column='aggregationStatisticCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvAggregationStatistic')),
                ('intendedTimeSpacingUnitsId', models.ForeignKey(blank=True, db_column='intendedTimeSpacingUnitsId', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units')),
                ('intendedXSpacingUnitsId', models.ForeignKey(blank=True, db_column='intendedXSpacingUnitsId', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units')),
                ('intendedZSpacingUnitsId', models.ForeignKey(blank=True, db_column='intendedZSpacingUnitsId', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units')),
                ('spatialReferenceId', models.ForeignKey(blank=True, db_column='spatialReferenceId', null=True, on_delete=django.db.models.deletion.CASCADE, to='odm2admin.SpatialReferences')),
                ('yLocationUnitsId', models.ForeignKey(blank=True, db_column='yLocationUnitsId', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units')),
            ],
            options={
                'db_table': 'ODM2.SectionResults',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Sites',
            fields=[
                ('samplingFeatureId', models.OneToOneField(db_column='samplingFeatureId', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='odm2admin.SamplingFeatures', verbose_name='sampling feature')),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('siteTypeCV', models.ForeignKey(db_column='siteTypeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvSiteType')),
                ('spatialReferenceId', models.ForeignKey(db_column='spatialReferenceId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.SpatialReferences', verbose_name='spatial reference id')),
            ],
            options={
                'verbose_name': 'Site',
                'db_table': 'ODM2.Sites',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SpecimenBatchPositions',
            fields=[
                ('featureActionId', models.OneToOneField(db_column='featureActionId', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='odm2admin.FeatureActions')),
                ('batchPositionNumber', models.IntegerField()),
                ('batchPositionLabel', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'ODM2.SpecimenBatchPositions',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Specimens',
            fields=[
                ('samplingFeatureId', models.OneToOneField(db_column='samplingFeatureId', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='odm2admin.SamplingFeatures')),
                ('isFieldSpecimen', models.BooleanField()),
                ('specimenMediumCV', models.ForeignKey(db_column='specimenMediumCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvSpecimenMedium')),
                ('specimenTypeCV', models.ForeignKey(db_column='specimenTypeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvSpecimenType')),
            ],
            options={
                'verbose_name': 'Specimen',
                'db_table': 'ODM2.Specimens',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SpectraResults',
            fields=[
                ('resultId', models.OneToOneField(db_column='resultId', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='odm2admin.Results')),
                ('xLocation', models.FloatField(blank=True, null=True)),
                ('yLocation', models.FloatField(blank=True, null=True)),
                ('zLocation', models.FloatField(blank=True, null=True)),
                ('intendedWaveLengthSpacing', models.FloatField(blank=True, null=True)),
                ('aggregationStatisticCV', models.ForeignKey(db_column='aggregationStatisticCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvAggregationStatistic')),
                ('intendedWavelengthSpacingUnitsId', models.ForeignKey(blank=True, db_column='intendedWaveLengthSpacingUnitsId', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units')),
                ('spatialReferenceId', models.ForeignKey(blank=True, db_column='spatialReferenceId', null=True, on_delete=django.db.models.deletion.CASCADE, to='odm2admin.SpatialReferences')),
                ('xLocationUnitsId', models.ForeignKey(blank=True, db_column='xLocationUnitsId', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units')),
                ('yLocationUnitsId', models.ForeignKey(blank=True, db_column='yLocationUnitsId', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units')),
                ('zLocationUnitsId', models.ForeignKey(blank=True, db_column='zLocationUnitsId', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units')),
            ],
            options={
                'db_table': 'ODM2.SpectraResults',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TimeSeriesResults',
            fields=[
                ('resultId', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='odm2admin.Results', verbose_name='Result Series')),
                ('xLocation', models.FloatField(blank=True, null=True, verbose_name='x location')),
                ('yLocation', models.FloatField(blank=True, null=True, verbose_name='y location')),
                ('zLocation', models.FloatField(blank=True, null=True, verbose_name='z location')),
                ('intendedTimeSpacing', models.FloatField(blank=True, help_text='time between measurements', null=True, verbose_name='Intended time spacing')),
                ('aggregationStatisticCV', models.ForeignKey(db_column='aggregationStatisticCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvAggregationStatistic')),
                ('intendedTimeSpacingUnitsId', models.ForeignKey(blank=True, db_column='intendedTimeSpacingUnitsId', help_text='Units of time between measurements. This defines the time series 1 hour, or 15 minutes for example.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units', verbose_name='Time Units')),
                ('spatialReferenceId', models.ForeignKey(blank=True, db_column='spatialreferenceid', null=True, on_delete=django.db.models.deletion.CASCADE, to='odm2admin.SpatialReferences', verbose_name='spatial reference')),
                ('xLocationUnitsId', models.ForeignKey(blank=True, db_column='xLocationUnitsId', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units', verbose_name='x location units')),
                ('yLocationUnitsId', models.ForeignKey(blank=True, db_column='yLocationUnitsId', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units', verbose_name='y location units')),
                ('zLocationUnitsId', models.ForeignKey(blank=True, db_column='zLocationUnitsId', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units', verbose_name='z location units')),
            ],
            options={
                'verbose_name': 'time series result',
                'db_table': 'ODM2.TimeSeriesResults',
                'ordering': ['resultId'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TrajectoryResults',
            fields=[
                ('resultId', models.OneToOneField(db_column='resultId', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='odm2admin.Results')),
                ('intendedTrajectorySpacing', models.FloatField(blank=True, null=True)),
                ('intendedTimeSpacing', models.FloatField(blank=True, null=True)),
                ('aggregationStatisticCV', models.ForeignKey(db_column='aggregationStatisticCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvAggregationStatistic')),
                ('intendedTimeSpacingUnitsId', models.ForeignKey(blank=True, db_column='intendedTimeSpacingUnitsId', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units')),
                ('intendedTrajectorySpacingUnitsId', models.ForeignKey(blank=True, db_column='intendedTrajectorySpacingUnitsId', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units')),
                ('spatialReferenceId', models.ForeignKey(blank=True, db_column='spatialReferenceId', null=True, on_delete=django.db.models.deletion.CASCADE, to='odm2admin.SpatialReferences')),
            ],
            options={
                'db_table': 'ODM2.TrajectoryResults',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TransectResults',
            fields=[
                ('resultId', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='odm2admin.Results')),
                ('zLocation', models.FloatField(blank=True, null=True)),
                ('intendedTransectSpacing', models.FloatField(blank=True, null=True)),
                ('intendedTimeSpacing', models.FloatField(blank=True, null=True)),
                ('aggregationStatisticCV', models.ForeignKey(db_column='aggregationStatisticCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvAggregationStatistic')),
                ('intendedTimeSpacingUnitsId', models.ForeignKey(blank=True, db_column='intendedTimeSpacingUnitsId', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units')),
                ('intendedTransectSpacingUnitsId', models.ForeignKey(blank=True, db_column='intendedTransectSpacingUnitsId', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units')),
                ('spatialReferenceId', models.ForeignKey(blank=True, db_column='spatialReferenceId', null=True, on_delete=django.db.models.deletion.CASCADE, to='odm2admin.SpatialReferences')),
                ('zLocationUnitsId', models.ForeignKey(blank=True, db_column='zLocationUnitsId', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units')),
            ],
            options={
                'db_table': 'ODM2.TransectResults',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='variableexternalidentifiers',
            name='variableId',
            field=models.ForeignKey(db_column='variableId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Variables'),
        ),
        migrations.AddField(
            model_name='variableextensionpropertyvalues',
            name='variableId',
            field=models.ForeignKey(db_column='variableId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Variables'),
        ),
        migrations.AddField(
            model_name='transectresultvalues',
            name='timeAggregationIntervalUnitsId',
            field=models.ForeignKey(db_column='timeAggregationIntervalUnitsId', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units'),
        ),
        migrations.AddField(
            model_name='transectresultvalues',
            name='transectDistanceUnitsId',
            field=models.ForeignKey(db_column='transectDistanceUnitsId', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units'),
        ),
        migrations.AddField(
            model_name='transectresultvalues',
            name='xLocationUnitsId',
            field=models.ForeignKey(db_column='xLocationUnitsId', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units'),
        ),
        migrations.AddField(
            model_name='transectresultvalues',
            name='yLocationUnitsId',
            field=models.ForeignKey(db_column='yLocationUnitsId', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units'),
        ),
        migrations.AddField(
            model_name='transectresultvalueannotations',
            name='valueId',
            field=models.ForeignKey(db_column='valueId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.TransectResultValues'),
        ),
        migrations.AddField(
            model_name='trajectoryresultvalues',
            name='timeAggregationIntervalUnitsId',
            field=models.ForeignKey(db_column='timeAggregationIntervalUnitsId', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units'),
        ),
        migrations.AddField(
            model_name='trajectoryresultvalues',
            name='trajectoryDistanceUnitsId',
            field=models.ForeignKey(db_column='trajectoryDistanceUnitsId', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units'),
        ),
        migrations.AddField(
            model_name='trajectoryresultvalues',
            name='xLocationUnitsId',
            field=models.ForeignKey(db_column='xLocationUnitsId', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units'),
        ),
        migrations.AddField(
            model_name='trajectoryresultvalues',
            name='yLocationUnitsId',
            field=models.ForeignKey(db_column='yLocationUnitsId', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units'),
        ),
        migrations.AddField(
            model_name='trajectoryresultvalues',
            name='zLocationUnitsId',
            field=models.ForeignKey(db_column='zLocationUnitsId', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units'),
        ),
        migrations.AddField(
            model_name='trajectoryresultvalueannotations',
            name='valueId',
            field=models.ForeignKey(db_column='valueId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.TrajectoryResultValues'),
        ),
        migrations.AddField(
            model_name='timeseriesresultvaluesext',
            name='timeAggregationIntervalUnitsId',
            field=models.ForeignKey(db_column='timeAggregationIntervalUnitsId', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='odm2admin.Units', verbose_name='Time Units'),
        ),
        migrations.AddField(
            model_name='timeseriesresultvalues',
            name='timeAggregationIntervalUnitsId',
            field=models.ForeignKey(db_column='timeAggregationIntervalUnitsId', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units', verbose_name='Time Units'),
        ),
        migrations.AddField(
            model_name='timeseriesresultvalueannotations',
            name='valueId',
            field=models.ForeignKey(db_column='valueId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.TimeSeriesResultValues'),
        ),
        migrations.AddField(
            model_name='taxonomicclassifierexternalidentifiers',
            name='taxonomicClassifierId',
            field=models.ForeignKey(db_column='taxonomicClassifierId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.TaxonomicClassifiers'),
        ),
        migrations.AddField(
            model_name='spectraresultvalues',
            name='timeAggregationIntervalUnitsId',
            field=models.ForeignKey(db_column='timeAggregationIntervalUnitsId', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units'),
        ),
        migrations.AddField(
            model_name='spectraresultvalues',
            name='waveLengthUnitsId',
            field=models.ForeignKey(db_column='waveLengthUnitsId', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units'),
        ),
        migrations.AddField(
            model_name='spectraresultvalueannotations',
            name='valueId',
            field=models.ForeignKey(db_column='valueId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.SpectraResultValues'),
        ),
        migrations.AddField(
            model_name='specimentaxonomicclassifiers',
            name='taxonomicClassifierId',
            field=models.ForeignKey(db_column='taxonomicClassifierId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.TaxonomicClassifiers'),
        ),
        migrations.AddField(
            model_name='spatialreferenceexternalidentifiers',
            name='spatialReferenceId',
            field=models.ForeignKey(db_column='spatialReferenceId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.SpatialReferences'),
        ),
        migrations.AddField(
            model_name='spatialoffsets',
            name='offset1UnitId',
            field=models.ForeignKey(db_column='offset1UnitId', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units'),
        ),
        migrations.AddField(
            model_name='spatialoffsets',
            name='offset2UnitId',
            field=models.ForeignKey(blank=True, db_column='offset2UnitId', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units'),
        ),
        migrations.AddField(
            model_name='spatialoffsets',
            name='offset3UnitId',
            field=models.ForeignKey(blank=True, db_column='offset3UnitId', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units'),
        ),
        migrations.AddField(
            model_name='spatialoffsets',
            name='spatialOffsetTypeCV',
            field=models.ForeignKey(db_column='spatialOffsetTypeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvSpatialOffsetType'),
        ),
        migrations.AddField(
            model_name='simulations',
            name='actionId',
            field=models.ForeignKey(db_column='actionId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Actions'),
        ),
        migrations.AddField(
            model_name='simulations',
            name='modelId',
            field=models.ForeignKey(db_column='modelId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Models'),
        ),
        migrations.AddField(
            model_name='sectionresultvalues',
            name='timeAggregationIntervalUnitsId',
            field=models.ForeignKey(db_column='timeAggregationIntervalUnitsId', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units'),
        ),
        migrations.AddField(
            model_name='sectionresultvalues',
            name='xLocationUnitsId',
            field=models.ForeignKey(db_column='xLocationUnitsId', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units'),
        ),
        migrations.AddField(
            model_name='sectionresultvalues',
            name='zLocationUnitsId',
            field=models.ForeignKey(db_column='zLocationUnitsId', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units'),
        ),
        migrations.AddField(
            model_name='sectionresultvalueannotations',
            name='valueId',
            field=models.ForeignKey(db_column='valueId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.SectionResultValues'),
        ),
        migrations.AddField(
            model_name='samplingfeatures',
            name='elevationDatumCV',
            field=models.ForeignKey(blank=True, db_column='elevationDatumCV', null=True, on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvElevationDatum'),
        ),
        migrations.AddField(
            model_name='samplingfeatures',
            name='samplingFeatureGeoType',
            field=models.ForeignKey(db_column='samplingFeatureGeoTypeCV', default='Point', null=True, on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvSamplingFeatureGeoType'),
        ),
        migrations.AddField(
            model_name='samplingfeatures',
            name='samplingFeatureType',
            field=models.ForeignKey(db_column='samplingFeatureTypeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvSamplingFeatureType'),
        ),
        migrations.AddField(
            model_name='samplingfeatureexternalidentifiers',
            name='samplingFeatureId',
            field=models.ForeignKey(db_column='samplingFeatureId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.SamplingFeatures'),
        ),
        migrations.AddField(
            model_name='samplingfeatureextensionpropertyvalues',
            name='samplingFeatureId',
            field=models.ForeignKey(db_column='samplingFeatureId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.SamplingFeatures'),
        ),
        migrations.AddField(
            model_name='samplingfeatureannotations',
            name='samplingFeatureId',
            field=models.ForeignKey(db_column='samplingFeatureId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.SamplingFeatures'),
        ),
        migrations.AddField(
            model_name='resultsdataquality',
            name='resultId',
            field=models.ForeignKey(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Results', verbose_name='result'),
        ),
        migrations.AddField(
            model_name='results',
            name='featureActionId',
            field=models.ForeignKey(db_column='featureactionid', on_delete=django.db.models.deletion.CASCADE, related_name='feature_actions', to='odm2admin.FeatureActions', verbose_name='sampling feature action'),
        ),
        migrations.AddField(
            model_name='results',
            name='processing_level',
            field=models.ForeignKey(db_column='processingLevelId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.ProcessingLevels'),
        ),
        migrations.AddField(
            model_name='results',
            name='resultType',
            field=models.ForeignKey(db_column='resultTypeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvResultType', verbose_name='result type'),
        ),
        migrations.AddField(
            model_name='results',
            name='sampledMediumCV',
            field=models.ForeignKey(blank=True, db_column='sampledmediumcv', null=True, on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvMedium', verbose_name='sampled medium'),
        ),
        migrations.AddField(
            model_name='results',
            name='statusCV',
            field=models.ForeignKey(blank=True, db_column='statuscv', null=True, on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvStatus', verbose_name='status'),
        ),
        migrations.AddField(
            model_name='results',
            name='taxonomicClassifierId',
            field=models.ForeignKey(blank=True, db_column='taxonomicClassifierId', null=True, on_delete=django.db.models.deletion.CASCADE, to='odm2admin.TaxonomicClassifiers', verbose_name='taxonomic classifier'),
        ),
        migrations.AddField(
            model_name='results',
            name='unitsId',
            field=models.ForeignKey(db_column='unitsId', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units', verbose_name='units'),
        ),
        migrations.AddField(
            model_name='results',
            name='variableId',
            field=models.ForeignKey(db_column='variableid', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Variables', verbose_name='variable'),
        ),
        migrations.AddField(
            model_name='resultextensionpropertyvalues',
            name='resultId',
            field=models.ForeignKey(db_column='resultId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Results'),
        ),
        migrations.AddField(
            model_name='resultannotations',
            name='resultId',
            field=models.ForeignKey(db_column='resultId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Results'),
        ),
        migrations.AddField(
            model_name='relatedresults',
            name='relatedResultId',
            field=models.ForeignKey(db_column='relatedResultId', on_delete=django.db.models.deletion.CASCADE, related_name='relatedResult', to='odm2admin.Results', verbose_name='related data result'),
        ),
        migrations.AddField(
            model_name='relatedresults',
            name='relationshipTypeCV',
            field=models.ForeignKey(db_column='relationshipTypeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvRelationshipType', verbose_name='relationship type'),
        ),
        migrations.AddField(
            model_name='relatedresults',
            name='resultId',
            field=models.ForeignKey(db_column='resultId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Results', verbose_name='data result'),
        ),
        migrations.AddField(
            model_name='relatedfeatures',
            name='relatedFeatureId',
            field=models.ForeignKey(db_column='relatedFeatureId', on_delete=django.db.models.deletion.CASCADE, related_name='RelatedFeatures', to='odm2admin.SamplingFeatures', verbose_name='second feature'),
        ),
        migrations.AddField(
            model_name='relatedfeatures',
            name='relationshipTypeCV',
            field=models.ForeignKey(db_column='relationshipTypeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvRelationshipType', verbose_name='relationship type'),
        ),
        migrations.AddField(
            model_name='relatedfeatures',
            name='samplingFeatureId',
            field=models.ForeignKey(db_column='samplingFeatureId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.SamplingFeatures', verbose_name='first feature'),
        ),
        migrations.AddField(
            model_name='relatedfeatures',
            name='spatialOffsetId',
            field=models.ForeignKey(blank=True, db_column='spatialOffsetId', null=True, on_delete=django.db.models.deletion.CASCADE, to='odm2admin.SpatialOffsets', verbose_name='spatial offset'),
        ),
        migrations.AddField(
            model_name='relatedactions',
            name='actionId',
            field=models.ForeignKey(db_column='actionId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Actions', verbose_name='action'),
        ),
        migrations.AddField(
            model_name='relatedactions',
            name='relatedActionId',
            field=models.ForeignKey(db_column='relatedActionId', on_delete=django.db.models.deletion.CASCADE, related_name='RelatedActions', to='odm2admin.Actions', verbose_name='related action'),
        ),
        migrations.AddField(
            model_name='relatedactions',
            name='relationshipTypeCV',
            field=models.ForeignKey(db_column='relationshipTypeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvRelationshipType', verbose_name='relationship type'),
        ),
        migrations.AddField(
            model_name='referencematerialvalues',
            name='unitsId',
            field=models.ForeignKey(db_column='unitsId', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units'),
        ),
        migrations.AddField(
            model_name='referencematerialvalues',
            name='variableId',
            field=models.ForeignKey(db_column='variableId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Variables'),
        ),
        migrations.AddField(
            model_name='referencematerials',
            name='samplingFeatureId',
            field=models.ForeignKey(blank=True, db_column='samplingFeatureId', null=True, on_delete=django.db.models.deletion.CASCADE, to='odm2admin.SamplingFeatures'),
        ),
        migrations.AddField(
            model_name='referencematerialexternalidentifiers',
            name='referenceMaterialId',
            field=models.ForeignKey(db_column='referenceMaterialId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.ReferenceMaterials'),
        ),
        migrations.AddField(
            model_name='profileresultvalues',
            name='timeAggregationIntervalUnitsId',
            field=models.ForeignKey(blank=True, db_column='timeAggregationIntervalUnitsId', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units', verbose_name='time aggregation interval unit'),
        ),
        migrations.AddField(
            model_name='profileresultvalues',
            name='zLocationUnitsId',
            field=models.ForeignKey(blank=True, db_column='zlocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units', verbose_name='z location unit'),
        ),
        migrations.AddField(
            model_name='profileresultvalueannotations',
            name='valueId',
            field=models.ForeignKey(db_column='valueId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.ProfileResultValues'),
        ),
        migrations.AddField(
            model_name='pointcoverageresultvalues',
            name='xLocationUnitsId',
            field=models.ForeignKey(db_column='xLocationUnitsId', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units'),
        ),
        migrations.AddField(
            model_name='pointcoverageresultvalues',
            name='yLocationUnitsId',
            field=models.ForeignKey(db_column='yLocationUnitsId', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units'),
        ),
        migrations.AddField(
            model_name='pointcoverageresultvalueannotations',
            name='valueId',
            field=models.ForeignKey(db_column='valueId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.PointCoverageResultValues'),
        ),
        migrations.AddField(
            model_name='modelaffiliations',
            name='modelId',
            field=models.ForeignKey(db_column='modelId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Models'),
        ),
        migrations.AddField(
            model_name='methods',
            name='organizationId',
            field=models.ForeignKey(blank=True, db_column='organizationId', null=True, on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Organizations', verbose_name='organization'),
        ),
        migrations.AddField(
            model_name='methodexternalidentifiers',
            name='methodId',
            field=models.ForeignKey(db_column='methodId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Methods'),
        ),
        migrations.AddField(
            model_name='methodextensionpropertyvalues',
            name='methodId',
            field=models.ForeignKey(db_column='methodId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Methods'),
        ),
        migrations.AddField(
            model_name='methodextensionpropertyvalues',
            name='propertyId',
            field=models.ForeignKey(db_column='propertyId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.ExtensionProperties'),
        ),
        migrations.AddField(
            model_name='methodcitations',
            name='methodId',
            field=models.ForeignKey(db_column='methodId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Methods', verbose_name='method'),
        ),
        migrations.AddField(
            model_name='methodcitations',
            name='relationshipTypeCV',
            field=models.ForeignKey(db_column='relationshipTypeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvRelationshipType', verbose_name='relationship type'),
        ),
        migrations.AddField(
            model_name='methodannotations',
            name='methodId',
            field=models.ForeignKey(db_column='methodId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Methods'),
        ),
        migrations.AddField(
            model_name='measurementresultvalueannotations',
            name='valueId',
            field=models.ForeignKey(db_column='valueId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.MeasurementResultValues'),
        ),
        migrations.AddField(
            model_name='instrumentoutputvariables',
            name='instrumentMethodId',
            field=models.ForeignKey(db_column='instrumentMethodId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Methods', verbose_name='instrument method'),
        ),
        migrations.AddField(
            model_name='instrumentoutputvariables',
            name='instrumentRawOutputUnitsId',
            field=models.ForeignKey(db_column='instrumentRawOutputUnitsId', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units', verbose_name='instrument raw output unit'),
        ),
        migrations.AddField(
            model_name='instrumentoutputvariables',
            name='modelId',
            field=models.ForeignKey(db_column='modelId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.EquipmentModels', verbose_name='equipment model'),
        ),
        migrations.AddField(
            model_name='instrumentoutputvariables',
            name='variableId',
            field=models.ForeignKey(db_column='variableId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Variables', verbose_name='variable'),
        ),
        migrations.AddField(
            model_name='featureactionsnames',
            name='featureActionId',
            field=models.ForeignKey(db_column='featureactionId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.FeatureActions'),
        ),
        migrations.AddField(
            model_name='featureactions',
            name='action',
            field=models.ForeignKey(db_column='actionId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Actions'),
        ),
        migrations.AddField(
            model_name='featureactions',
            name='samplingFeatureId',
            field=models.ForeignKey(db_column='samplingFeatureId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.SamplingFeatures'),
        ),
        migrations.AddField(
            model_name='externalidentifiersystems',
            name='identifierSystemOrganizationId',
            field=models.ForeignKey(db_column='identifierSystemOrganizationId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Organizations'),
        ),
        migrations.AddField(
            model_name='extensionproperties',
            name='propertyUnitsId',
            field=models.ForeignKey(blank=True, db_column='propertyUnitsId', null=True, on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Units', verbose_name='units for property'),
        ),
        migrations.AddField(
            model_name='equipmentused',
            name='actionId',
            field=models.ForeignKey(db_column='actionId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Actions'),
        ),
        migrations.AddField(
            model_name='equipmentused',
            name='equipmentId',
            field=models.ForeignKey(db_column='equipmentId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Equipment'),
        ),
        migrations.AddField(
            model_name='equipmentmodels',
            name='modelManufacturerId',
            field=models.ForeignKey(db_column='modelManufacturerId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Organizations', verbose_name='model manufacturer'),
        ),
        migrations.AddField(
            model_name='equipment',
            name='equipmentModelId',
            field=models.ForeignKey(db_column='equipmentModelId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.EquipmentModels'),
        ),
        migrations.AddField(
            model_name='equipment',
            name='equipmentOwnerId',
            field=models.ForeignKey(db_column='equipmentOwnerId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.People'),
        ),
        migrations.AddField(
            model_name='equipment',
            name='equipmentTypeCV',
            field=models.ForeignKey(db_column='equipmentTypeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvEquipmentType'),
        ),
        migrations.AddField(
            model_name='equipment',
            name='equipmentVendorId',
            field=models.ForeignKey(db_column='equipmentVendorId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Organizations'),
        ),
        migrations.AddField(
            model_name='datasetsresults',
            name='resultId',
            field=models.ForeignKey(db_column='resultId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Results', verbose_name='add the dataset to the result'),
        ),
        migrations.AddField(
            model_name='datasetcitations',
            name='datasetId',
            field=models.ForeignKey(db_column='datasetId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Datasets', verbose_name='dataset'),
        ),
        migrations.AddField(
            model_name='datasetcitations',
            name='relationshipTypeCV',
            field=models.ForeignKey(db_column='relationshipTypeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvRelationshipType', verbose_name='relationship type'),
        ),
        migrations.AddField(
            model_name='dataquality',
            name='dataQualityValueUnitsId',
            field=models.ForeignKey(blank=True, db_column='dataQualityValueUnitsId', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='odm2admin.Units', verbose_name='data quality value units'),
        ),
        migrations.AddField(
            model_name='dataloggerfiles',
            name='programId',
            field=models.ForeignKey(db_column='programId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.DataLoggerProgramFiles'),
        ),
        migrations.AddField(
            model_name='dataloggerfilecolumns',
            name='dataLoggerFileId',
            field=models.ForeignKey(db_column='dataLoggerFileId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.DataLoggerFiles', verbose_name='data logger file'),
        ),
        migrations.AddField(
            model_name='dataloggerfilecolumns',
            name='instrumentOutputVariableId',
            field=models.ForeignKey(db_column='instrumentOutputVariableId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.InstrumentOutputVariables', verbose_name='instrument output variable'),
        ),
        migrations.AddField(
            model_name='dataloggerfilecolumns',
            name='recordingIntervalUnitsId',
            field=models.ForeignKey(blank=True, db_column='recordingIntervalUnitsId', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='relatedRecordingIntervalUnitsId', to='odm2admin.Units', verbose_name='recording interval units'),
        ),
        migrations.AddField(
            model_name='dataloggerfilecolumns',
            name='resultId',
            field=models.ForeignKey(blank=True, db_column='resultId', null=True, on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Results', verbose_name='result'),
        ),
        migrations.AddField(
            model_name='dataloggerfilecolumns',
            name='scanIntervalUnitsId',
            field=models.ForeignKey(blank=True, db_column='scanIntervalUnitsId', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='relatedScanIntervalUnitsId', to='odm2admin.Units', verbose_name='scan interval units'),
        ),
        migrations.AddField(
            model_name='citationexternalidentifiers',
            name='citationId',
            field=models.ForeignKey(db_column='citationId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Citations'),
        ),
        migrations.AddField(
            model_name='citationexternalidentifiers',
            name='externalIdentifierSystemId',
            field=models.ForeignKey(db_column='externalIdentifierSystemId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.ExternalIdentifierSystems'),
        ),
        migrations.AddField(
            model_name='citationextensionpropertyvalues',
            name='citationId',
            field=models.ForeignKey(db_column='citationId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Citations'),
        ),
        migrations.AddField(
            model_name='citationextensionpropertyvalues',
            name='propertyId',
            field=models.ForeignKey(db_column='propertyId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.ExtensionProperties'),
        ),
        migrations.AddField(
            model_name='categoricalresultvalueannotations',
            name='valueId',
            field=models.ForeignKey(db_column='valueId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CategoricalResultValues'),
        ),
        migrations.AddField(
            model_name='calibrationstandards',
            name='referenceMaterialId',
            field=models.ForeignKey(db_column='referenceMaterialId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.ReferenceMaterials'),
        ),
        migrations.AddField(
            model_name='calibrationreferenceequipment',
            name='equipmentId',
            field=models.ForeignKey(db_column='equipmentId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Equipment'),
        ),
        migrations.AddField(
            model_name='authorlists',
            name='citationId',
            field=models.ForeignKey(db_column='citationId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Citations', verbose_name='citation'),
        ),
        migrations.AddField(
            model_name='authorlists',
            name='personId',
            field=models.ForeignKey(blank=True, db_column='personId', null=True, on_delete=django.db.models.deletion.CASCADE, to='odm2admin.People', verbose_name='person'),
        ),
        migrations.AddField(
            model_name='annotations',
            name='annotationTypeCV',
            field=models.ForeignKey(db_column='annotationTypeCV', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvAnnotationType'),
        ),
        migrations.AddField(
            model_name='annotations',
            name='annotatorId',
            field=models.ForeignKey(blank=True, db_column='annotatorId', null=True, on_delete=django.db.models.deletion.CASCADE, to='odm2admin.People'),
        ),
        migrations.AddField(
            model_name='annotations',
            name='citationId',
            field=models.ForeignKey(blank=True, db_column='citationId', null=True, on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Citations'),
        ),
        migrations.AddField(
            model_name='affiliations',
            name='organizationId',
            field=models.ForeignKey(blank=True, db_column='organizationId', null=True, on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Organizations', verbose_name='organization'),
        ),
        migrations.AddField(
            model_name='affiliations',
            name='personId',
            field=models.ForeignKey(db_column='personId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.People', verbose_name='person'),
        ),
        migrations.AddField(
            model_name='actions',
            name='actionType',
            field=models.ForeignKey(db_column='actionTypeCV', help_text='A vocabulary for describing the type of actions performed in making observations. Depending on the action type, the action may or may not produce an observation result. view action type details here http://vocabulary.odm2.org/actiontype/', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CvActionType'),
        ),
        migrations.AddField(
            model_name='actions',
            name='method',
            field=models.ForeignKey(db_column='methodId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Methods'),
        ),
        migrations.AddField(
            model_name='actionextensionpropertyvalues',
            name='actionId',
            field=models.ForeignKey(db_column='actionId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Actions'),
        ),
        migrations.AddField(
            model_name='actionextensionpropertyvalues',
            name='propertyId',
            field=models.ForeignKey(db_column='propertyId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.ExtensionProperties'),
        ),
        migrations.AddField(
            model_name='actiondirectives',
            name='actionId',
            field=models.ForeignKey(db_column='actionId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Actions'),
        ),
        migrations.AddField(
            model_name='actiondirectives',
            name='directiveId',
            field=models.ForeignKey(db_column='directiveId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Directives'),
        ),
        migrations.AddField(
            model_name='actionby',
            name='actionId',
            field=models.ForeignKey(db_column='actionId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Actions', verbose_name='action'),
        ),
        migrations.AddField(
            model_name='actionby',
            name='affiliationId',
            field=models.ForeignKey(db_column='affiliationId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Affiliations', verbose_name='person by affiliation'),
        ),
        migrations.AddField(
            model_name='actionannotations',
            name='actionId',
            field=models.ForeignKey(db_column='actionId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Actions'),
        ),
        migrations.AddField(
            model_name='actionannotations',
            name='annotationId',
            field=models.ForeignKey(db_column='annotationId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Annotations'),
        ),
        migrations.AddField(
            model_name='transectresultvalues',
            name='resultId',
            field=models.ForeignKey(db_column='resultId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.TransectResults'),
        ),
        migrations.AddField(
            model_name='trajectoryresultvalues',
            name='resultId',
            field=models.ForeignKey(db_column='resultId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.TrajectoryResults'),
        ),
        migrations.AddField(
            model_name='timeseriesresultvaluesext',
            name='resultId',
            field=models.ForeignKey(db_column='resultId', on_delete=django.db.models.deletion.DO_NOTHING, to='odm2admin.TimeSeriesResults'),
        ),
        migrations.AddField(
            model_name='timeseriesresultvalues',
            name='resultId',
            field=models.ForeignKey(db_column='resultId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.TimeSeriesResults'),
        ),
        migrations.AddField(
            model_name='spectraresultvalues',
            name='resultId',
            field=models.ForeignKey(db_column='resultId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.SpectraResults'),
        ),
        migrations.AddField(
            model_name='specimentaxonomicclassifiers',
            name='samplingFeatureId',
            field=models.ForeignKey(db_column='samplingFeatureId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.Specimens'),
        ),
        migrations.AddField(
            model_name='sectionresultvalues',
            name='resultId',
            field=models.ForeignKey(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.SectionResults'),
        ),
        migrations.AddField(
            model_name='resultnormalizationvalues',
            name='normalizedByReferenceMaterialValueId',
            field=models.ForeignKey(db_column='normalizedByReferenceMaterialValueId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.ReferenceMaterialValues'),
        ),
        migrations.AddField(
            model_name='profileresultvalues',
            name='resultId',
            field=models.ForeignKey(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.ProfileResults'),
        ),
        migrations.AddField(
            model_name='pointcoverageresultvalues',
            name='resultId',
            field=models.ForeignKey(db_column='resultId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.PointCoverageResults'),
        ),
        migrations.AddField(
            model_name='measurementresultvalues',
            name='resultId',
            field=models.ForeignKey(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.MeasurementResults', verbose_name='Result Series'),
        ),
        migrations.AddField(
            model_name='measurementresultvaluefile',
            name='resultId',
            field=models.ForeignKey(db_column='resultId', help_text='CAUTION saving a measurement result value file will attempt to load values into the database.', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.MeasurementResults', verbose_name='result'),
        ),
        migrations.AddField(
            model_name='categoricalresultvalues',
            name='resultId',
            field=models.ForeignKey(db_column='resultId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CategoricalResults'),
        ),
        migrations.AddField(
            model_name='calibrationstandards',
            name='actionId',
            field=models.ForeignKey(db_column='actionId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CalibrationActions'),
        ),
        migrations.AddField(
            model_name='calibrationreferenceequipment',
            name='actionId',
            field=models.ForeignKey(db_column='actionId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.CalibrationActions'),
        ),
        migrations.AddField(
            model_name='calibrationactions',
            name='instrumentOutputVariableId',
            field=models.ForeignKey(db_column='instrumentOutputVariableId', on_delete=django.db.models.deletion.CASCADE, to='odm2admin.InstrumentOutputVariables'),
        ),
    ]
